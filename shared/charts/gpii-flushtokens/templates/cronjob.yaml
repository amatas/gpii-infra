apiVersion: batch/v1beta1
kind: CronJob
metadata:
  namespace: {{ .Release.Namespace | quote }}
  name: {{ template "flushtokens.name" . }}
spec:
  schedule: "{{ .Values.cronJobSchedule }}"
  successfulJobsHistoryLimit: 5
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Replace
  startingDeadlineSeconds: 200
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app: {{ template "flushtokens.name" . }}
        spec:
          shareProcessNamespace: true
          containers:
          - name: gpii-flushtokens
            image: "{{ .Values.image.repository }}@{{ .Values.image.checksum }}"
            command: [ "/bin/sh", "-c", "/app/scripts/dockerDeleteExpiredAccessTokens.sh" ]
            env:
            - name: GPII_COUCHDB_URL
              value: '{{ .Values.couchdbUrl }}'
            - name: MAX_DOCS_IN_BATCH_PER_REQUEST
              value: '{{ .Values.maxDocsInBatchPerRequest }}'
          - name: istio-proxy-manager
            image: "{{ .Values.image.repository }}@{{ .Values.image.checksum }}"
            securityContext:
              allowPrivilegeEscalation: false
              runAsUser: 1337
            command: [ "/bin/sh", "-c" ]
            args:
              - while ! ps -o user | grep node > /dev/null;
                do
                  echo 'Waiting for dockerDeleteExpiredAccessTokens.sh to start...';
                  sleep 2;
                done;
                echo 'dockerDeleteExpiredAccessTokens.sh started.';
                while ps -o user | grep node > /dev/null;
                do
                  echo 'Waiting for dockerDeleteExpiredAccessTokens.sh to finish...';
                  sleep 2;
                done;
                echo 'dockerDeleteExpiredAccessTokens.sh finished.';
                while pgrep pilot-agent > /dev/null;
                do
                  echo 'Sending TERM to pilot-agent';
                  pkill pilot-agent;
                  sleep 2;
                done;
                echo 'pilot-agent terminated';
          restartPolicy: OnFailure
